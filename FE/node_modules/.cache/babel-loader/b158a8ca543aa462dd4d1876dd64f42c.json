{"ast":null,"code":"import * as type from \"../types\";\nconst initialState = {\n  photos: [],\n  selectedPhotos: [],\n  loading: false,\n  error: null,\n  user: {}\n};\nexport default function photos(state = initialState, action) {\n  switch (action.type) {\n    case type.GET_ALL_PHOTOS_REQUESTED:\n      {\n        return { ...state,\n          loading: true\n        };\n      }\n\n    case type.GET_ALL_PHOTOS_SUCCESS:\n      {\n        let data = action.photos && action.photos.entries.map((entry, id) => {\n          let obj = {\n            src: entry.picture,\n            isSelected: false,\n            thumbnail: entry.picture,\n            order: id,\n            timestamp: entry.timestamp,\n            thumbnailWidth: 5,\n            thumbnailHeight: 5\n          };\n          return obj;\n        });\n        return { ...state,\n          loading: false,\n          photos: data.length > 0 && data,\n          user: action.photos.author\n        };\n      }\n\n    case type.GET_ALL_PHOTOS_FAILED:\n      {\n        return { ...state,\n          loading: false,\n          error: action.message\n        };\n      }\n\n    case type.SELECT_PHOTO:\n      {\n        return { ...state,\n          selectedPhotos: action.payload\n        };\n      }\n\n    case type.ADD_PHOTOS_REQUESTED:\n      {\n        return { ...state,\n          loading: true\n        };\n      }\n\n    case type.ADD_PHOTOS_SUCCESS:\n      {\n        return { ...state,\n          loading: false\n        };\n      }\n\n    case type.ADD_PHOTOS_FAILED:\n      {\n        return { ...state,\n          loading: false,\n          error: action.message\n        };\n      }\n\n    default:\n      return state;\n  }\n}","map":{"version":3,"sources":["/Users/sirajmsm/Desktop/gapstarpro/photo-grid-app/FE/src/redux/reducers/photos.js"],"names":["type","initialState","photos","selectedPhotos","loading","error","user","state","action","GET_ALL_PHOTOS_REQUESTED","GET_ALL_PHOTOS_SUCCESS","data","entries","map","entry","id","obj","src","picture","isSelected","thumbnail","order","timestamp","thumbnailWidth","thumbnailHeight","length","author","GET_ALL_PHOTOS_FAILED","message","SELECT_PHOTO","payload","ADD_PHOTOS_REQUESTED","ADD_PHOTOS_SUCCESS","ADD_PHOTOS_FAILED"],"mappings":"AAAA,OAAO,KAAKA,IAAZ,MAAsB,UAAtB;AAEA,MAAMC,YAAY,GAAG;AACnBC,EAAAA,MAAM,EAAE,EADW;AAEnBC,EAAAA,cAAc,EAAE,EAFG;AAGnBC,EAAAA,OAAO,EAAE,KAHU;AAInBC,EAAAA,KAAK,EAAE,IAJY;AAKnBC,EAAAA,IAAI,EAAE;AALa,CAArB;AAQA,eAAe,SAASJ,MAAT,CAAgBK,KAAK,GAAGN,YAAxB,EAAsCO,MAAtC,EAA8C;AAC3D,UAAQA,MAAM,CAACR,IAAf;AACE,SAAKA,IAAI,CAACS,wBAAV;AAAoC;AAClC,eAAO,EACL,GAAGF,KADE;AAELH,UAAAA,OAAO,EAAE;AAFJ,SAAP;AAID;;AACD,SAAKJ,IAAI,CAACU,sBAAV;AAAkC;AAChC,YAAIC,IAAI,GACNH,MAAM,CAACN,MAAP,IACAM,MAAM,CAACN,MAAP,CAAcU,OAAd,CAAsBC,GAAtB,CAA0B,CAACC,KAAD,EAAQC,EAAR,KAAe;AACvC,cAAIC,GAAG,GAAG;AACRC,YAAAA,GAAG,EAAEH,KAAK,CAACI,OADH;AAERC,YAAAA,UAAU,EAAE,KAFJ;AAGRC,YAAAA,SAAS,EAAEN,KAAK,CAACI,OAHT;AAIRG,YAAAA,KAAK,EAAEN,EAJC;AAKRO,YAAAA,SAAS,EAAER,KAAK,CAACQ,SALT;AAMRC,YAAAA,cAAc,EAAE,CANR;AAORC,YAAAA,eAAe,EAAE;AAPT,WAAV;AASA,iBAAOR,GAAP;AACD,SAXD,CAFF;AAcA,eAAO,EACL,GAAGT,KADE;AAELH,UAAAA,OAAO,EAAE,KAFJ;AAGLF,UAAAA,MAAM,EAAES,IAAI,CAACc,MAAL,GAAc,CAAd,IAAmBd,IAHtB;AAILL,UAAAA,IAAI,EAAEE,MAAM,CAACN,MAAP,CAAcwB;AAJf,SAAP;AAMD;;AACD,SAAK1B,IAAI,CAAC2B,qBAAV;AAAiC;AAC/B,eAAO,EACL,GAAGpB,KADE;AAELH,UAAAA,OAAO,EAAE,KAFJ;AAGLC,UAAAA,KAAK,EAAEG,MAAM,CAACoB;AAHT,SAAP;AAKD;;AAED,SAAK5B,IAAI,CAAC6B,YAAV;AAAwB;AACtB,eAAO,EACL,GAAGtB,KADE;AAELJ,UAAAA,cAAc,EAAEK,MAAM,CAACsB;AAFlB,SAAP;AAID;;AAED,SAAK9B,IAAI,CAAC+B,oBAAV;AAAgC;AAC9B,eAAO,EACL,GAAGxB,KADE;AAELH,UAAAA,OAAO,EAAE;AAFJ,SAAP;AAID;;AAED,SAAKJ,IAAI,CAACgC,kBAAV;AAA8B;AAC5B,eAAO,EACL,GAAGzB,KADE;AAELH,UAAAA,OAAO,EAAE;AAFJ,SAAP;AAID;;AACD,SAAKJ,IAAI,CAACiC,iBAAV;AAA6B;AAC3B,eAAO,EACL,GAAG1B,KADE;AAELH,UAAAA,OAAO,EAAE,KAFJ;AAGLC,UAAAA,KAAK,EAAEG,MAAM,CAACoB;AAHT,SAAP;AAKD;;AACD;AACE,aAAOrB,KAAP;AAjEJ;AAmED","sourcesContent":["import * as type from \"../types\";\n\nconst initialState = {\n  photos: [],\n  selectedPhotos: [],\n  loading: false,\n  error: null,\n  user: {},\n};\n\nexport default function photos(state = initialState, action) {\n  switch (action.type) {\n    case type.GET_ALL_PHOTOS_REQUESTED: {\n      return {\n        ...state,\n        loading: true,\n      };\n    }\n    case type.GET_ALL_PHOTOS_SUCCESS: {\n      let data =\n        action.photos &&\n        action.photos.entries.map((entry, id) => {\n          let obj = {\n            src: entry.picture,\n            isSelected: false,\n            thumbnail: entry.picture,\n            order: id,\n            timestamp: entry.timestamp,\n            thumbnailWidth: 5,\n            thumbnailHeight: 5,\n          };\n          return obj;\n        });\n      return {\n        ...state,\n        loading: false,\n        photos: data.length > 0 && data,\n        user: action.photos.author,\n      };\n    }\n    case type.GET_ALL_PHOTOS_FAILED: {\n      return {\n        ...state,\n        loading: false,\n        error: action.message,\n      };\n    }\n\n    case type.SELECT_PHOTO: {\n      return {\n        ...state,\n        selectedPhotos: action.payload,\n      };\n    }\n\n    case type.ADD_PHOTOS_REQUESTED: {\n      return {\n        ...state,\n        loading: true,\n      };\n    }\n\n    case type.ADD_PHOTOS_SUCCESS: {\n      return {\n        ...state,\n        loading: false,\n      };\n    }\n    case type.ADD_PHOTOS_FAILED: {\n      return {\n        ...state,\n        loading: false,\n        error: action.message,\n      };\n    }\n    default:\n      return state;\n  }\n}\n"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"import * as tslib_1 from \"tslib\";\n/**\n * Get the active drag position given its initial\n * coordinates and grid meta\n * @param index\n * @param grid\n * @param dx\n * @param dy\n */\n\nexport function getDragPosition(index, grid, dx, dy, center) {\n  var _a = tslib_1.__read(getPositionForIndex(index, grid).xy, 2),\n      left = _a[0],\n      top = _a[1];\n\n  return {\n    xy: [left + dx + (center ? grid.columnWidth / 2 : 0), top + dy + (center ? grid.rowHeight / 2 : 0)]\n  };\n}\n/**\n * Get the relative top, left position for a particular\n * index in a grid\n * @param i\n * @param grid\n * @param traverseIndex (destination for traverse)\n */\n\nexport function getPositionForIndex(i, _a, traverseIndex) {\n  var boxesPerRow = _a.boxesPerRow,\n      rowHeight = _a.rowHeight,\n      columnWidth = _a.columnWidth;\n  var index = typeof traverseIndex == \"number\" ? i >= traverseIndex ? i + 1 : i : i;\n  var x = index % boxesPerRow * columnWidth;\n  var y = Math.floor(index / boxesPerRow) * rowHeight;\n  return {\n    xy: [x, y]\n  };\n}\n/**\n * Given relative coordinates, determine which index\n * we are currently in\n * @param x\n * @param y\n * @param param2\n */\n\nexport function getIndexFromCoordinates(x, y, _a, count) {\n  var rowHeight = _a.rowHeight,\n      boxesPerRow = _a.boxesPerRow,\n      columnWidth = _a.columnWidth;\n  var index = Math.floor(y / rowHeight) * boxesPerRow + Math.floor(x / columnWidth);\n  return index >= count ? count : index;\n}\n/**\n * Get the target index during a drag\n * @param startIndex\n * @param grid\n * @param count\n * @param dx\n * @param dy\n */\n\nexport function getTargetIndex(startIndex, grid, count, dx, dy) {\n  var _a = tslib_1.__read(getDragPosition(startIndex, grid, dx, dy, true).xy, 2),\n      cx = _a[0],\n      cy = _a[1];\n\n  return getIndexFromCoordinates(cx, cy, grid, count);\n}","map":{"version":3,"sources":["/Users/sirajmsm/Desktop/gapstarpro/photo-grid-app/FE/node_modules/react-grid-dnd/esm/helpers.js"],"names":["tslib_1","getDragPosition","index","grid","dx","dy","center","_a","__read","getPositionForIndex","xy","left","top","columnWidth","rowHeight","i","traverseIndex","boxesPerRow","x","y","Math","floor","getIndexFromCoordinates","count","getTargetIndex","startIndex","cx","cy"],"mappings":"AAAA,OAAO,KAAKA,OAAZ,MAAyB,OAAzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,SAASC,eAAT,CAAyBC,KAAzB,EAAgCC,IAAhC,EAAsCC,EAAtC,EAA0CC,EAA1C,EAA8CC,MAA9C,EAAsD;AACzD,MAAIC,EAAE,GAAGP,OAAO,CAACQ,MAAR,CAAeC,mBAAmB,CAACP,KAAD,EAAQC,IAAR,CAAnB,CAAiCO,EAAhD,EAAoD,CAApD,CAAT;AAAA,MAAiEC,IAAI,GAAGJ,EAAE,CAAC,CAAD,CAA1E;AAAA,MAA+EK,GAAG,GAAGL,EAAE,CAAC,CAAD,CAAvF;;AACA,SAAO;AACHG,IAAAA,EAAE,EAAE,CACAC,IAAI,GAAGP,EAAP,IAAaE,MAAM,GAAGH,IAAI,CAACU,WAAL,GAAmB,CAAtB,GAA0B,CAA7C,CADA,EAEAD,GAAG,GAAGP,EAAN,IAAYC,MAAM,GAAGH,IAAI,CAACW,SAAL,GAAiB,CAApB,GAAwB,CAA1C,CAFA;AADD,GAAP;AAMH;AACD;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,SAASL,mBAAT,CAA6BM,CAA7B,EAAgCR,EAAhC,EAAoCS,aAApC,EAAmD;AACtD,MAAIC,WAAW,GAAGV,EAAE,CAACU,WAArB;AAAA,MAAkCH,SAAS,GAAGP,EAAE,CAACO,SAAjD;AAAA,MAA4DD,WAAW,GAAGN,EAAE,CAACM,WAA7E;AACA,MAAIX,KAAK,GAAG,OAAOc,aAAP,IAAwB,QAAxB,GAAoCD,CAAC,IAAIC,aAAL,GAAqBD,CAAC,GAAG,CAAzB,GAA6BA,CAAjE,GAAsEA,CAAlF;AACA,MAAIG,CAAC,GAAIhB,KAAK,GAAGe,WAAT,GAAwBJ,WAAhC;AACA,MAAIM,CAAC,GAAGC,IAAI,CAACC,KAAL,CAAWnB,KAAK,GAAGe,WAAnB,IAAkCH,SAA1C;AACA,SAAO;AACHJ,IAAAA,EAAE,EAAE,CAACQ,CAAD,EAAIC,CAAJ;AADD,GAAP;AAGH;AACD;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,SAASG,uBAAT,CAAiCJ,CAAjC,EAAoCC,CAApC,EAAuCZ,EAAvC,EAA2CgB,KAA3C,EAAkD;AACrD,MAAIT,SAAS,GAAGP,EAAE,CAACO,SAAnB;AAAA,MAA8BG,WAAW,GAAGV,EAAE,CAACU,WAA/C;AAAA,MAA4DJ,WAAW,GAAGN,EAAE,CAACM,WAA7E;AACA,MAAIX,KAAK,GAAGkB,IAAI,CAACC,KAAL,CAAWF,CAAC,GAAGL,SAAf,IAA4BG,WAA5B,GAA0CG,IAAI,CAACC,KAAL,CAAWH,CAAC,GAAGL,WAAf,CAAtD;AACA,SAAOX,KAAK,IAAIqB,KAAT,GAAiBA,KAAjB,GAAyBrB,KAAhC;AACH;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,SAASsB,cAAT,CAAwBC,UAAxB,EAAoCtB,IAApC,EAA0CoB,KAA1C,EAAiDnB,EAAjD,EAAqDC,EAArD,EAAyD;AAC5D,MAAIE,EAAE,GAAGP,OAAO,CAACQ,MAAR,CAAeP,eAAe,CAACwB,UAAD,EAAatB,IAAb,EAAmBC,EAAnB,EAAuBC,EAAvB,EAA2B,IAA3B,CAAf,CAAgDK,EAA/D,EAAmE,CAAnE,CAAT;AAAA,MAAgFgB,EAAE,GAAGnB,EAAE,CAAC,CAAD,CAAvF;AAAA,MAA4FoB,EAAE,GAAGpB,EAAE,CAAC,CAAD,CAAnG;;AACA,SAAOe,uBAAuB,CAACI,EAAD,EAAKC,EAAL,EAASxB,IAAT,EAAeoB,KAAf,CAA9B;AACH","sourcesContent":["import * as tslib_1 from \"tslib\";\n/**\n * Get the active drag position given its initial\n * coordinates and grid meta\n * @param index\n * @param grid\n * @param dx\n * @param dy\n */\nexport function getDragPosition(index, grid, dx, dy, center) {\n    var _a = tslib_1.__read(getPositionForIndex(index, grid).xy, 2), left = _a[0], top = _a[1];\n    return {\n        xy: [\n            left + dx + (center ? grid.columnWidth / 2 : 0),\n            top + dy + (center ? grid.rowHeight / 2 : 0)\n        ]\n    };\n}\n/**\n * Get the relative top, left position for a particular\n * index in a grid\n * @param i\n * @param grid\n * @param traverseIndex (destination for traverse)\n */\nexport function getPositionForIndex(i, _a, traverseIndex) {\n    var boxesPerRow = _a.boxesPerRow, rowHeight = _a.rowHeight, columnWidth = _a.columnWidth;\n    var index = typeof traverseIndex == \"number\" ? (i >= traverseIndex ? i + 1 : i) : i;\n    var x = (index % boxesPerRow) * columnWidth;\n    var y = Math.floor(index / boxesPerRow) * rowHeight;\n    return {\n        xy: [x, y]\n    };\n}\n/**\n * Given relative coordinates, determine which index\n * we are currently in\n * @param x\n * @param y\n * @param param2\n */\nexport function getIndexFromCoordinates(x, y, _a, count) {\n    var rowHeight = _a.rowHeight, boxesPerRow = _a.boxesPerRow, columnWidth = _a.columnWidth;\n    var index = Math.floor(y / rowHeight) * boxesPerRow + Math.floor(x / columnWidth);\n    return index >= count ? count : index;\n}\n/**\n * Get the target index during a drag\n * @param startIndex\n * @param grid\n * @param count\n * @param dx\n * @param dy\n */\nexport function getTargetIndex(startIndex, grid, count, dx, dy) {\n    var _a = tslib_1.__read(getDragPosition(startIndex, grid, dx, dy, true).xy, 2), cx = _a[0], cy = _a[1];\n    return getIndexFromCoordinates(cx, cy, grid, count);\n}\n"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"import { call, put, takeEvery } from \"redux-saga/effects\";\nimport { getAllPhotosApi, addPhotosApi } from \"../../services/api\";\n\nfunction getAllPhotosData() {\n  return fetch(getAllPhotosApi, {\n    method: \"GET\",\n    headers: {\n      \"Content-Type\": \"application/json\"\n    }\n  }).then(response => response.json()).catch(error => {\n    throw error;\n  });\n}\n\nfunction AddSelectedPhotosData(data) {\n  return fetch(addPhotosApi, {\n    method: \"POST\",\n    body: JSON.stringify(data),\n    headers: {\n      \"Content-Type\": \"application/json\",\n      \"Access-Control-Allow-Origin\": \"*\",\n      \"Access-Control-Allow-Methods\": \"*\",\n      \"Access-Control-Allow-Headers\": \"*\"\n    }\n  }).then(response => response.json()).catch(error => {\n    throw error;\n  });\n}\n\n_c = AddSelectedPhotosData;\n\nfunction* addSelectedPhotos(action) {\n  try {\n    yield call(AddSelectedPhotosData(action.payload));\n    yield put({\n      type: \"ADD_PHOTOS_SUCCESS\"\n    });\n  } catch (e) {\n    yield put({\n      type: \"ADD_PHOTOS_FAILED\",\n      message: e.message\n    });\n  }\n}\n\nfunction* getAllPhotos(action) {\n  try {\n    const photos = yield call(getAllPhotosData);\n    yield put({\n      type: \"GET_ALL_PHOTOS_SUCCESS\",\n      photos: photos\n    });\n  } catch (e) {\n    yield put({\n      type: \"GET_ALL_PHOTOS_FAILED\",\n      message: e.message\n    });\n  }\n}\n\nfunction* photoSaga() {\n  yield takeEvery(\"GET_ALL_PHOTOS_REQUESTED\", getAllPhotos);\n  yield takeEvery(\"ADD_PHOTOS_REQUESTED\", addSelectedPhotos);\n}\n\nexport default photoSaga;\n\nvar _c;\n\n$RefreshReg$(_c, \"AddSelectedPhotosData\");","map":{"version":3,"sources":["/Users/sirajmsm/Desktop/gapstarpro/photo-grid-app/FE/src/redux/sagas/photoSaga.js"],"names":["call","put","takeEvery","getAllPhotosApi","addPhotosApi","getAllPhotosData","fetch","method","headers","then","response","json","catch","error","AddSelectedPhotosData","data","body","JSON","stringify","addSelectedPhotos","action","payload","type","e","message","getAllPhotos","photos","photoSaga"],"mappings":"AAAA,SAASA,IAAT,EAAeC,GAAf,EAAoBC,SAApB,QAAqC,oBAArC;AACA,SAASC,eAAT,EAA0BC,YAA1B,QAA8C,oBAA9C;;AAEA,SAASC,gBAAT,GAA4B;AAC1B,SAAOC,KAAK,CAACH,eAAD,EAAkB;AAC5BI,IAAAA,MAAM,EAAE,KADoB;AAE5BC,IAAAA,OAAO,EAAE;AACP,sBAAgB;AADT;AAFmB,GAAlB,CAAL,CAMJC,IANI,CAMEC,QAAD,IAAcA,QAAQ,CAACC,IAAT,EANf,EAOJC,KAPI,CAOGC,KAAD,IAAW;AAChB,UAAMA,KAAN;AACD,GATI,CAAP;AAUD;;AAED,SAASC,qBAAT,CAA+BC,IAA/B,EAAqC;AACnC,SAAOT,KAAK,CAACF,YAAD,EAAe;AACzBG,IAAAA,MAAM,EAAE,MADiB;AAEzBS,IAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAeH,IAAf,CAFmB;AAGzBP,IAAAA,OAAO,EAAE;AACP,sBAAgB,kBADT;AAEP,qCAA+B,GAFxB;AAGP,sCAAgC,GAHzB;AAIP,sCAAgC;AAJzB;AAHgB,GAAf,CAAL,CAUJC,IAVI,CAUEC,QAAD,IAAcA,QAAQ,CAACC,IAAT,EAVf,EAWJC,KAXI,CAWGC,KAAD,IAAW;AAChB,UAAMA,KAAN;AACD,GAbI,CAAP;AAcD;;KAfQC,qB;;AAiBT,UAAUK,iBAAV,CAA4BC,MAA5B,EAAoC;AAClC,MAAI;AACF,UAAMpB,IAAI,CAACc,qBAAqB,CAACM,MAAM,CAACC,OAAR,CAAtB,CAAV;AACA,UAAMpB,GAAG,CAAC;AAAEqB,MAAAA,IAAI,EAAE;AAAR,KAAD,CAAT;AACD,GAHD,CAGE,OAAOC,CAAP,EAAU;AACV,UAAMtB,GAAG,CAAC;AAAEqB,MAAAA,IAAI,EAAE,mBAAR;AAA6BE,MAAAA,OAAO,EAAED,CAAC,CAACC;AAAxC,KAAD,CAAT;AACD;AACF;;AAED,UAAUC,YAAV,CAAuBL,MAAvB,EAA+B;AAC7B,MAAI;AACF,UAAMM,MAAM,GAAG,MAAM1B,IAAI,CAACK,gBAAD,CAAzB;AACA,UAAMJ,GAAG,CAAC;AAAEqB,MAAAA,IAAI,EAAE,wBAAR;AAAkCI,MAAAA,MAAM,EAAEA;AAA1C,KAAD,CAAT;AACD,GAHD,CAGE,OAAOH,CAAP,EAAU;AACV,UAAMtB,GAAG,CAAC;AAAEqB,MAAAA,IAAI,EAAE,uBAAR;AAAiCE,MAAAA,OAAO,EAAED,CAAC,CAACC;AAA5C,KAAD,CAAT;AACD;AACF;;AAED,UAAUG,SAAV,GAAsB;AACpB,QAAMzB,SAAS,CAAC,0BAAD,EAA6BuB,YAA7B,CAAf;AACA,QAAMvB,SAAS,CAAC,sBAAD,EAAyBiB,iBAAzB,CAAf;AACD;;AAED,eAAeQ,SAAf","sourcesContent":["import { call, put, takeEvery } from \"redux-saga/effects\";\nimport { getAllPhotosApi, addPhotosApi } from \"../../services/api\";\n\nfunction getAllPhotosData() {\n  return fetch(getAllPhotosApi, {\n    method: \"GET\",\n    headers: {\n      \"Content-Type\": \"application/json\",\n    },\n  })\n    .then((response) => response.json())\n    .catch((error) => {\n      throw error;\n    });\n}\n\nfunction AddSelectedPhotosData(data) {\n  return fetch(addPhotosApi, {\n    method: \"POST\",\n    body: JSON.stringify(data),\n    headers: {\n      \"Content-Type\": \"application/json\",\n      \"Access-Control-Allow-Origin\": \"*\",\n      \"Access-Control-Allow-Methods\": \"*\",\n      \"Access-Control-Allow-Headers\": \"*\",\n    },\n  })\n    .then((response) => response.json())\n    .catch((error) => {\n      throw error;\n    });\n}\n\nfunction* addSelectedPhotos(action) {\n  try {\n    yield call(AddSelectedPhotosData(action.payload));\n    yield put({ type: \"ADD_PHOTOS_SUCCESS\" });\n  } catch (e) {\n    yield put({ type: \"ADD_PHOTOS_FAILED\", message: e.message });\n  }\n}\n\nfunction* getAllPhotos(action) {\n  try {\n    const photos = yield call(getAllPhotosData);\n    yield put({ type: \"GET_ALL_PHOTOS_SUCCESS\", photos: photos });\n  } catch (e) {\n    yield put({ type: \"GET_ALL_PHOTOS_FAILED\", message: e.message });\n  }\n}\n\nfunction* photoSaga() {\n  yield takeEvery(\"GET_ALL_PHOTOS_REQUESTED\", getAllPhotos);\n  yield takeEvery(\"ADD_PHOTOS_REQUESTED\", addSelectedPhotos);\n}\n\nexport default photoSaga;\n"]},"metadata":{},"sourceType":"module"}
{"code":"import * as tslib_1 from \"tslib\";\r\nimport * as React from \"react\";\r\nimport { useGestureResponder } from \"react-gesture-responder\";\r\nimport { animated, interpolate, useSpring } from \"react-spring\";\r\nimport { GridItemContext } from \"./GridItemContext\";\r\nexport function GridItem(_a) {\r\n    var children = _a.children, style = _a.style, className = _a.className, other = tslib_1.__rest(_a, [\"children\", \"style\", \"className\"]);\r\n    var context = React.useContext(GridItemContext);\r\n    if (!context) {\r\n        throw Error(\"Unable to find GridItem context. Please ensure that GridItem is used as a child of GridDropZone\");\r\n    }\r\n    var top = context.top, disableDrag = context.disableDrag, endTraverse = context.endTraverse, onStart = context.onStart, mountWithTraverseTarget = context.mountWithTraverseTarget, left = context.left, i = context.i, onMove = context.onMove, onEnd = context.onEnd, grid = context.grid, isDragging = context.dragging;\r\n    var columnWidth = grid.columnWidth, rowHeight = grid.rowHeight;\r\n    var dragging = React.useRef(false);\r\n    var startCoords = React.useRef([left, top]);\r\n    var _b = tslib_1.__read(useSpring(function () {\r\n        if (mountWithTraverseTarget) {\r\n            // this feels really brittle. unsure of a better\r\n            // solution for now.\r\n            var mountXY = mountWithTraverseTarget;\r\n            endTraverse();\r\n            return {\r\n                xy: mountXY,\r\n                immediate: true,\r\n                zIndex: \"1\",\r\n                scale: 1.1,\r\n                opacity: 0.8\r\n            };\r\n        }\r\n        return {\r\n            xy: [left, top],\r\n            immediate: true,\r\n            zIndex: \"0\",\r\n            scale: 1,\r\n            opacity: 1\r\n        };\r\n    }), 2), styles = _b[0], set = _b[1];\r\n    // handle move updates imperatively\r\n    function handleMove(state, e) {\r\n        var x = startCoords.current[0] + state.delta[0];\r\n        var y = startCoords.current[1] + state.delta[1];\r\n        set({\r\n            xy: [x, y],\r\n            zIndex: \"1\",\r\n            immediate: true,\r\n            opacity: 0.8,\r\n            scale: 1.1\r\n        });\r\n        onMove(state, x, y);\r\n    }\r\n    // handle end of drag\r\n    function handleEnd(state) {\r\n        var x = startCoords.current[0] + state.delta[0];\r\n        var y = startCoords.current[1] + state.delta[1];\r\n        dragging.current = false;\r\n        onEnd(state, x, y);\r\n    }\r\n    var bind = useGestureResponder({\r\n        onMoveShouldSet: function (state) {\r\n            if (disableDrag) {\r\n                return false;\r\n            }\r\n            onStart();\r\n            startCoords.current = [left, top];\r\n            dragging.current = true;\r\n            return true;\r\n        },\r\n        onMove: handleMove,\r\n        onTerminationRequest: function () {\r\n            if (dragging.current) {\r\n                return false;\r\n            }\r\n            return true;\r\n        },\r\n        onTerminate: handleEnd,\r\n        onRelease: handleEnd\r\n    }, {\r\n        enableMouse: true\r\n    }).bind;\r\n    /**\r\n     * Update our position when left or top\r\n     * values change\r\n     */\r\n    React.useEffect(function () {\r\n        if (!dragging.current) {\r\n            set({\r\n                xy: [left, top],\r\n                zIndex: \"0\",\r\n                opacity: 1,\r\n                scale: 1,\r\n                immediate: false\r\n            });\r\n        }\r\n    }, [dragging.current, left, top]);\r\n    var props = tslib_1.__assign({ className: \"GridItem\" +\r\n            (isDragging ? \" dragging\" : \"\") +\r\n            (!!disableDrag ? \" disabled\" : \"\") +\r\n            className\r\n            ? \" \" + className\r\n            : \"\" }, bind, { style: tslib_1.__assign({ cursor: !!disableDrag ? \"grab\" : undefined, zIndex: styles.zIndex, position: \"absolute\", width: columnWidth + \"px\", opacity: styles.opacity, height: rowHeight + \"px\", boxSizing: \"border-box\", transform: interpolate([styles.xy, styles.scale], function (xy, s) {\r\n                return \"translate3d(\" + xy[0] + \"px, \" + xy[1] + \"px, 0) scale(\" + s + \")\";\r\n            }) }, style) }, other);\r\n    return typeof children === \"function\" ? (children(animated.div, props, {\r\n        dragging: isDragging,\r\n        disabled: !!disableDrag,\r\n        i: i,\r\n        grid: grid\r\n    })) : (React.createElement(animated.div, tslib_1.__assign({}, props), children));\r\n}\r\n","dts":{"name":"/Users/benmcmahen/open-source/react-grid-dnd/GridItem.d.ts","writeByteOrderMark":false,"text":"import * as React from \"react\";\r\ninterface GridItemProps extends React.HTMLAttributes<HTMLDivElement> {\r\n    children: React.ReactNode;\r\n}\r\nexport declare function GridItem({ children, style, className, ...other }: GridItemProps): any;\r\nexport {};\r\n"}}
